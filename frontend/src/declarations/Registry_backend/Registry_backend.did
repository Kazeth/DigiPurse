type Time = int;
type TicketKind = 
 variant {
   Seated: record {seatInfo: text;};
   Seatless;
 };
type Ticket = 
 record {
   eventID: text;
   id: text;
   kind: TicketKind;
   owner: principal;
   price: nat;
   valid: bool;
 };
type Organizer = 
 record {
   address: text;
   id: principal;
   joinDate: Time;
   name: text;
 };
type Event = 
 record {
   date: Time;
   description: text;
   durationMinutes: nat;
   id: text;
   name: text;
   organizer: principal;
   ticketSupply: nat;
 };
type Customer = 
 record {
   address: text;
   id: principal;
   joinDate: Time;
   name: text;
 };
service : {
  createEvent: (organizer: principal, name: text, desc: text, date: Time,
   duration: nat, supply: nat) -> ();
  getAllCustomers: () -> (vec record {
                                principal;
                                Customer;
                              }) query;
  getAllEvents: () -> (vec Event) query;
  getCustomerProfile: (p: principal) -> (opt Customer) query;
  getCustomerTickets: (p: principal) -> (vec Ticket) query;
  registerCustomer: ("principal": principal, profile: Customer) -> ();
  registerOrganizer: ("principal": principal, profile: Organizer) -> ();
}
