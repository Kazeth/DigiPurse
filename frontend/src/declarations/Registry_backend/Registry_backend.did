type Transaction = 
 record {
   buyer: principal;
   id: text;
   method: text;
   paymentSource: text;
   price: nat;
   seller: principal;
   ticketID: text;
   timestamp: Time;
 };
type Time = int;
type TicketKind = 
 variant {
   Seated: record {seatInfo: text;};
   Seatless;
 };
type Ticket = 
 record {
   eventID: text;
   isOnMarketplace: bool;
   kind: TicketKind;
   owner: principal;
   price: nat;
   ticketDesc: text;
   ticketID: text;
   valid: bool;
 };
type Customer = 
 record {
   address: text;
   id: principal;
   joinDate: Time;
   name: text;
 };
type ActivityType = 
 variant {
   AccountCreated;
   IdentityVerified;
   TicketPurchased;
   TicketSold;
 };
type ActivityLog = 
 record {
   activityType: ActivityType;
   description: text;
   "principal": principal;
   timestamp: Time;
 };
service : {
  addTransaction: (tx: Transaction) -> ();
  checkUserExist: (p: principal) -> (bool);
  getAllCustomers: () -> (vec Customer) query;
  getAllTransactions: () -> (vec Transaction) query;
  getCustomerProfile: (p: principal) -> (opt Customer) query;
  getCustomerTickets: (p: principal) -> (opt vec Ticket) query;
  getUserActivity: (p: principal) -> (vec ActivityLog) query;
  recordActivity: ("principal": principal, activityType: ActivityType,
   description: text) -> ();
  registerCustomer: ("principal": principal, profile: Customer) -> ();
  updateCustomerProfile: ("principal": principal, profile: Customer) -> ();
}
